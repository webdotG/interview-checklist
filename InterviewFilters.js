// InterviewFilters.js - –ö–ª–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é

export class InterviewFilters {
  constructor(containerSelector = '#filters-container') {
    this.container = document.querySelector(containerSelector)
    this.originalData = []
    this.filteredData = []
    this.onFilterChange = null
    this.isVisible = true

    this.initElements()
    this.bindEvents()
  }

  initElements() {
    if (!this.container) {
      console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    // —Å–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    this.container.innerHTML = this.createFiltersHTML()

    // –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.salaryFilter = this.container.querySelector('#salary-filter')
    this.questionsFilter = this.container.querySelector('#questions-filter')
    this.clearFiltersBtn = this.container.querySelector('#clear-filters-btn')
    this.toggleFiltersBtn = this.container.querySelector('#toggle-filters-btn')
    this.filtersWrapper = this.container.querySelector('.filters-wrapper')
    this.resultCounter = this.container.querySelector('#results-counter')
  }

  createFiltersHTML() {
    return `
      <div class="filters-wrapper">
        <div class="filter-group">
          <label class="filter-label" for="salary-filter">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ:</label>
          <select id="salary-filter" class="filter-select">
            <option value="">–ë–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</option>
            <option value="salary-desc">–û—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π</option>
            <option value="salary-asc">–û—Ç –º–µ–Ω—å—à–µ–π –∫ –±–æ–ª—å—à–µ–π</option>
          </select>
        </div>

        <div class="filter-group">
          <label class="filter-label" for="questions-filter">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:</label>
          <select id="questions-filter" class="filter-select">
            <option value="">–ë–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</option>
            <option value="questions-desc">–û—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É</option>
            <option value="questions-asc">–û—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É</option>
          </select>
        </div>
      </div>

      <div class="filters-actions">
        <button id="clear-filters-btn" class="clear-filters-btn">
          üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å
        </button>
        <button id="toggle-filters-btn" class="toggle-filters-btn">
          üëÅÔ∏è –°–∫—Ä—ã—Ç—å
        </button>
        <div id="results-counter" class="results-counter">
          –ù–∞–π–¥–µ–Ω–æ: 0
        </div>
      </div>
    `
  }

  bindEvents() {
    if (!this.salaryFilter || !this.questionsFilter) return

    this.salaryFilter.addEventListener('change', () => this.applyFilters())
    this.questionsFilter.addEventListener('change', () => this.applyFilters())
    this.clearFiltersBtn.addEventListener('click', () => this.clearFilters())
    this.toggleFiltersBtn.addEventListener('click', () =>
      this.toggleVisibility(),
    )
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  setData(interviews) {
    this.originalData = [...interviews]
    this.filteredData = [...interviews]
    this.updateResultCounter()
    return this
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  onChange(callback) {
    this.onFilterChange = callback
    return this
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  applyFilters() {
    let result = [...this.originalData]

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    const salarySort = this.salaryFilter.value
    if (salarySort) {
      result = this.sortBySalary(result, salarySort.split('-')[1])
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
    const questionsSort = this.questionsFilter.value
    if (questionsSort) {
      result = this.sortByQuestions(result, questionsSort.split('-')[1])
    }

    this.filteredData = result
    this.updateResultCounter()
    this.notifyChange()
  }

  // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  clearFilters() {
    this.salaryFilter.value = ''
    this.questionsFilter.value = ''
    this.filteredData = [...this.originalData]
    this.updateResultCounter()
    this.notifyChange()
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  toggleVisibility() {
    this.isVisible = !this.isVisible

    if (this.isVisible) {
      this.filtersWrapper.style.display = 'flex'
      this.toggleFiltersBtn.textContent = 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å'
    } else {
      this.filtersWrapper.style.display = 'none'
      this.toggleFiltersBtn.textContent = 'üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å'
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  getFilteredData() {
    return this.filteredData
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  getFilterStats() {
    const salaryActive = this.salaryFilter.value !== ''
    const questionsActive = this.questionsFilter.value !== ''

    return {
      totalOriginal: this.originalData.length,
      totalFiltered: this.filteredData.length,
      filtersActive: salaryActive || questionsActive,
      activeFilters: {
        salary: salaryActive
          ? this.salaryFilter.options[this.salaryFilter.selectedIndex].text
          : null,
        questions: questionsActive
          ? this.questionsFilter.options[this.questionsFilter.selectedIndex]
              .text
          : null,
      },
    }
  }

  // –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–¥—Å—á–µ—Ç –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  countAnsweredQuestions(interview) {
    let count = 0
    if (!interview.answers) return 0

    Object.values(interview.answers).forEach((subsections) => {
      if (subsections && typeof subsections === 'object') {
        Object.values(subsections).forEach((questions) => {
          if (questions && typeof questions === 'object') {
            Object.values(questions).forEach((questionData) => {
              if (questionData && questionData.checked) {
                count++
              }
            })
          }
        })
      }
    })

    return count
  }

  // –£—Ç–∏–ª–∏—Ç–∞: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
  sortBySalary(interviews, order = 'desc') {
    return [...interviews].sort((a, b) => {
      const salaryA = this.parseSalary(a.salary)
      const salaryB = this.parseSalary(b.salary)

      if (order === 'desc') {
        return salaryB - salaryA
      } else {
        return salaryA - salaryB
      }
    })
  }

  // –£—Ç–∏–ª–∏—Ç–∞: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤
  sortByQuestions(interviews, order = 'desc') {
    return [...interviews].sort((a, b) => {
      const questionsA = this.countAnsweredQuestions(a)
      const questionsB = this.countAnsweredQuestions(b)

      if (order === 'desc') {
        return questionsB - questionsA
      } else {
        return questionsA - questionsB
      }
    })
  }

  // –£—Ç–∏–ª–∏—Ç–∞: –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
  parseSalary(salary) {
    if (!salary) return 0

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
    const cleaned = salary.toString().replace(/[^\d.,]/g, '')

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
    const parsed = parseFloat(cleaned.replace(',', '.'))

    return isNaN(parsed) ? 0 : parsed
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  updateResultCounter() {
    if (this.resultCounter) {
      const count = this.filteredData.length
      this.resultCounter.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${count}`

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      this.resultCounter.classList.add('updating')
      setTimeout(() => {
        this.resultCounter.classList.remove('updating')
      }, 500)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  notifyChange() {
    if (this.onFilterChange && typeof this.onFilterChange === 'function') {
      this.onFilterChange({
        data: this.filteredData,
        stats: this.getFilterStats(),
      })
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  show() {
    this.container.classList.remove('hidden')
  }

  hide() {
    this.container.classList.add('hidden')
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  setLoading(loading = true) {
    if (loading) {
      this.container.classList.add('loading')
    } else {
      this.container.classList.remove('loading')
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage)
  getState() {
    return {
      salary: this.salaryFilter.value,
      questions: this.questionsFilter.value,
      isVisible: this.isVisible,
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  setState(state) {
    if (state.salary !== undefined) {
      this.salaryFilter.value = state.salary
    }

    if (state.questions !== undefined) {
      this.questionsFilter.value = state.questions
    }

    if (state.isVisible !== undefined) {
      this.isVisible = state.isVisible
      if (!this.isVisible) {
        this.toggleVisibility()
      }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    this.applyFilters()
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  destroy() {
    if (this.salaryFilter) {
      this.salaryFilter.removeEventListener('change', this.applyFilters)
    }
    if (this.questionsFilter) {
      this.questionsFilter.removeEventListener('change', this.applyFilters)
    }
    if (this.clearFiltersBtn) {
      this.clearFiltersBtn.removeEventListener('click', this.clearFilters)
    }
    if (this.toggleFiltersBtn) {
      this.toggleFiltersBtn.removeEventListener('click', this.toggleVisibility)
    }
  }
}
